[gd_scene load_steps=6 format=2]

[ext_resource path="res://art/white.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 base : hint_color;
uniform sampler2D grain;
uniform float grain_strength = 0.05;
uniform sampler2D vignette;
uniform float fps = 12.0;
uniform float stretch = 0.5;
uniform float flashing = 0.0;

float make_grain(float time, vec2 uv) {

	vec2 ofs = vec2(sin(41.0 * time * sin(time * 123.0)), sin(27.0 * time * sin(time * 312.0)));
	return texture(grain, (uv + mod(ofs, vec2(1.0, 1.0))) * stretch).r;
}

void fragment() {
	vec3 c = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0).rgb;
	
	//float v = max(c.r, max(c.g, c.b));
	float v = dot(c, vec3(0.33333, 0.33333, 0.33333));
	v = sqrt(v);
	//v *= v;
	
	float f = 1.0 / fps;
	float g = make_grain(TIME - mod(TIME, f), UV);
	g = max(g, make_grain(TIME - mod(TIME, f) + f, UV) * 0.5);
	g = max(g, make_grain(TIME - mod(TIME, f) + f * 2.0, UV) * 0.25);
	
	//COLOR.rgb = base.rgb * v - vec3(g) * grain_strength;
	COLOR.rgb =   vec3(g) * grain_strength + vec3(c) ;
	//COLOR.rgb = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0).rgb;
	//COLOR.rgb *= texture(vignette, UV).r;
	float ft = TIME * 0.002;
	//COLOR.rgb += vec3(sin(75.0 * ft * sin(ft * 123.0))) * flashing;
}
"

[sub_resource type="OpenSimplexNoise" id=2]
seed = 2
period = 0.1

[sub_resource type="NoiseTexture" id=3]
seamless = true
noise = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 1 )
shader_param/base = Color( 0, 0, 0, 1 )
shader_param/grain_strength = 0.11
shader_param/fps = 12
shader_param/stretch = 0.5
shader_param/flashing = 0.0
shader_param/grain = SubResource( 3 )

[node name="old_film" type="TextureRect"]
material = SubResource( 4 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -3.0
margin_right = 3.0
size_flags_horizontal = 2
size_flags_vertical = 2
texture = ExtResource( 1 )
expand = true
